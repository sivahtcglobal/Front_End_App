/**
 * @fileoverview added by tsickle
 * Generated from: lib/mat-select-country.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { MatSelectCountryComponent } from './mat-select-country.component';
import { MatAutocompleteModule, MatButtonModule, MatIconModule, MatIconRegistry, MatInputModule, MatMenuModule } from '@angular/material';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { DomSanitizer } from '@angular/platform-browser';
import { COUNTRIES_DB } from './db';
/**
 * @author Anthony Nahas
 * \@since 06.11.19
 */
var MatSelectCountryModule = /** @class */ (function () {
    function MatSelectCountryModule(iconRegistry, sanitizer) {
        this.iconRegistry = iconRegistry;
        this.sanitizer = sanitizer;
        this.registerCountries();
    }
    /**
     * @return {?}
     */
    MatSelectCountryModule.prototype.registerCountries = /**
     * @return {?}
     */
    function () {
        var e_1, _a;
        try {
            for (var COUNTRIES_DB_1 = tslib_1.__values(COUNTRIES_DB), COUNTRIES_DB_1_1 = COUNTRIES_DB_1.next(); !COUNTRIES_DB_1_1.done; COUNTRIES_DB_1_1 = COUNTRIES_DB_1.next()) {
                var country = COUNTRIES_DB_1_1.value;
                /** @type {?} */
                var countryAlpha2Code = country.alpha2Code.toLowerCase();
                this.iconRegistry
                    .addSvgIcon(countryAlpha2Code, this.sanitizer
                    .bypassSecurityTrustResourceUrl("assets/svg-country-flags/svg/" + countryAlpha2Code + ".svg"));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (COUNTRIES_DB_1_1 && !COUNTRIES_DB_1_1.done && (_a = COUNTRIES_DB_1.return)) _a.call(COUNTRIES_DB_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    MatSelectCountryModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [MatSelectCountryComponent],
                    imports: [
                        CommonModule,
                        FormsModule,
                        ReactiveFormsModule,
                        HttpClientModule,
                        MatButtonModule,
                        MatMenuModule,
                        MatInputModule,
                        MatAutocompleteModule,
                        MatIconModule
                        // FlexLayoutModule
                    ],
                    exports: [MatSelectCountryComponent]
                },] }
    ];
    /** @nocollapse */
    MatSelectCountryModule.ctorParameters = function () { return [
        { type: MatIconRegistry },
        { type: DomSanitizer }
    ]; };
    return MatSelectCountryModule;
}());
export { MatSelectCountryModule };
if (false) {
    /**
     * @type {?}
     * @private
     */
    MatSelectCountryModule.prototype.iconRegistry;
    /**
     * @type {?}
     * @private
     */
    MatSelectCountryModule.prototype.sanitizer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXNlbGVjdC1jb3VudHJ5Lm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bhbmd1bGFyLW1hdGVyaWFsLWV4dGVuc2lvbnMvc2VsZWN0LWNvdW50cnkvIiwic291cmNlcyI6WyJsaWIvbWF0LXNlbGVjdC1jb3VudHJ5Lm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3ZDLE9BQU8sRUFBQyx5QkFBeUIsRUFBQyxNQUFNLGdDQUFnQyxDQUFDO0FBQ3pFLE9BQU8sRUFBQyxxQkFBcUIsRUFBRSxlQUFlLEVBQUUsYUFBYSxFQUFFLGVBQWUsRUFBRSxjQUFjLEVBQUUsYUFBYSxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDeEksT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQzdDLE9BQU8sRUFBQyxXQUFXLEVBQUUsbUJBQW1CLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNoRSxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUN0RCxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDdkQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLE1BQU0sQ0FBQzs7Ozs7QUFPbEM7SUFrQkUsZ0NBQW9CLFlBQTZCLEVBQVUsU0FBdUI7UUFBOUQsaUJBQVksR0FBWixZQUFZLENBQWlCO1FBQVUsY0FBUyxHQUFULFNBQVMsQ0FBYztRQUNoRixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUMzQixDQUFDOzs7O0lBRUQsa0RBQWlCOzs7SUFBakI7OztZQUNFLEtBQXNCLElBQUEsaUJBQUEsaUJBQUEsWUFBWSxDQUFBLDBDQUFBLG9FQUFFO2dCQUEvQixJQUFNLE9BQU8seUJBQUE7O29CQUNWLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFO2dCQUMxRCxJQUFJLENBQUMsWUFBWTtxQkFDZCxVQUFVLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLFNBQVM7cUJBQzFDLDhCQUE4QixDQUFDLGtDQUFnQyxpQkFBaUIsU0FBTSxDQUFDLENBQUMsQ0FBQzthQUMvRjs7Ozs7Ozs7O0lBQ0gsQ0FBQzs7Z0JBN0JGLFFBQVEsU0FBQztvQkFDUixZQUFZLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQztvQkFDekMsT0FBTyxFQUFFO3dCQUNQLFlBQVk7d0JBQ1osV0FBVzt3QkFDWCxtQkFBbUI7d0JBQ25CLGdCQUFnQjt3QkFDaEIsZUFBZTt3QkFDZixhQUFhO3dCQUNiLGNBQWM7d0JBQ2QscUJBQXFCO3dCQUNyQixhQUFhO3dCQUNiLG1CQUFtQjtxQkFDcEI7b0JBQ0QsT0FBTyxFQUFFLENBQUMseUJBQXlCLENBQUM7aUJBQ3JDOzs7O2dCQTNCOEQsZUFBZTtnQkFJdEUsWUFBWTs7SUF1Q3BCLDZCQUFDO0NBQUEsQUEvQkQsSUErQkM7U0FmWSxzQkFBc0I7Ozs7OztJQUVyQiw4Q0FBcUM7Ozs7O0lBQUUsMkNBQStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtOZ01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge01hdFNlbGVjdENvdW50cnlDb21wb25lbnR9IGZyb20gJy4vbWF0LXNlbGVjdC1jb3VudHJ5LmNvbXBvbmVudCc7XG5pbXBvcnQge01hdEF1dG9jb21wbGV0ZU1vZHVsZSwgTWF0QnV0dG9uTW9kdWxlLCBNYXRJY29uTW9kdWxlLCBNYXRJY29uUmVnaXN0cnksIE1hdElucHV0TW9kdWxlLCBNYXRNZW51TW9kdWxlfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbCc7XG5pbXBvcnQge0NvbW1vbk1vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7Rm9ybXNNb2R1bGUsIFJlYWN0aXZlRm9ybXNNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7SHR0cENsaWVudE1vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHtEb21TYW5pdGl6ZXJ9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHtDT1VOVFJJRVNfREJ9IGZyb20gJy4vZGInO1xuXG5cbi8qKlxuICogQGF1dGhvciBBbnRob255IE5haGFzXG4gKiBAc2luY2UgMDYuMTEuMTlcbiAqL1xuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbTWF0U2VsZWN0Q291bnRyeUNvbXBvbmVudF0sXG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGUsXG4gICAgRm9ybXNNb2R1bGUsXG4gICAgUmVhY3RpdmVGb3Jtc01vZHVsZSxcbiAgICBIdHRwQ2xpZW50TW9kdWxlLFxuICAgIE1hdEJ1dHRvbk1vZHVsZSxcbiAgICBNYXRNZW51TW9kdWxlLFxuICAgIE1hdElucHV0TW9kdWxlLFxuICAgIE1hdEF1dG9jb21wbGV0ZU1vZHVsZSxcbiAgICBNYXRJY29uTW9kdWxlXG4gICAgLy8gRmxleExheW91dE1vZHVsZVxuICBdLFxuICBleHBvcnRzOiBbTWF0U2VsZWN0Q291bnRyeUNvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgTWF0U2VsZWN0Q291bnRyeU1vZHVsZSB7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpY29uUmVnaXN0cnk6IE1hdEljb25SZWdpc3RyeSwgcHJpdmF0ZSBzYW5pdGl6ZXI6IERvbVNhbml0aXplcikge1xuICAgIHRoaXMucmVnaXN0ZXJDb3VudHJpZXMoKTtcbiAgfVxuXG4gIHJlZ2lzdGVyQ291bnRyaWVzKCkge1xuICAgIGZvciAoY29uc3QgY291bnRyeSBvZiBDT1VOVFJJRVNfREIpIHtcbiAgICAgIGNvbnN0IGNvdW50cnlBbHBoYTJDb2RlID0gY291bnRyeS5hbHBoYTJDb2RlLnRvTG93ZXJDYXNlKCk7XG4gICAgICB0aGlzLmljb25SZWdpc3RyeVxuICAgICAgICAuYWRkU3ZnSWNvbihjb3VudHJ5QWxwaGEyQ29kZSwgdGhpcy5zYW5pdGl6ZXJcbiAgICAgICAgICAuYnlwYXNzU2VjdXJpdHlUcnVzdFJlc291cmNlVXJsKGBhc3NldHMvc3ZnLWNvdW50cnktZmxhZ3Mvc3ZnLyR7Y291bnRyeUFscGhhMkNvZGV9LnN2Z2ApKTtcbiAgICB9XG4gIH1cblxufVxuIl19