/**
 * @fileoverview added by tsickle
 * Generated from: lib/mat-select-country.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { MatSelectCountryComponent } from './mat-select-country.component';
import { MatAutocompleteModule, MatButtonModule, MatIconModule, MatIconRegistry, MatInputModule, MatMenuModule } from '@angular/material';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { DomSanitizer } from '@angular/platform-browser';
import { COUNTRIES_DB } from './db';
/**
 * @author Anthony Nahas
 * \@since 06.11.19
 */
export class MatSelectCountryModule {
    /**
     * @param {?} iconRegistry
     * @param {?} sanitizer
     */
    constructor(iconRegistry, sanitizer) {
        this.iconRegistry = iconRegistry;
        this.sanitizer = sanitizer;
        this.registerCountries();
    }
    /**
     * @return {?}
     */
    registerCountries() {
        for (const country of COUNTRIES_DB) {
            /** @type {?} */
            const countryAlpha2Code = country.alpha2Code.toLowerCase();
            this.iconRegistry
                .addSvgIcon(countryAlpha2Code, this.sanitizer
                .bypassSecurityTrustResourceUrl(`assets/svg-country-flags/svg/${countryAlpha2Code}.svg`));
        }
    }
}
MatSelectCountryModule.decorators = [
    { type: NgModule, args: [{
                declarations: [MatSelectCountryComponent],
                imports: [
                    CommonModule,
                    FormsModule,
                    ReactiveFormsModule,
                    HttpClientModule,
                    MatButtonModule,
                    MatMenuModule,
                    MatInputModule,
                    MatAutocompleteModule,
                    MatIconModule
                    // FlexLayoutModule
                ],
                exports: [MatSelectCountryComponent]
            },] }
];
/** @nocollapse */
MatSelectCountryModule.ctorParameters = () => [
    { type: MatIconRegistry },
    { type: DomSanitizer }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    MatSelectCountryModule.prototype.iconRegistry;
    /**
     * @type {?}
     * @private
     */
    MatSelectCountryModule.prototype.sanitizer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXNlbGVjdC1jb3VudHJ5Lm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bhbmd1bGFyLW1hdGVyaWFsLWV4dGVuc2lvbnMvc2VsZWN0LWNvdW50cnkvIiwic291cmNlcyI6WyJsaWIvbWF0LXNlbGVjdC1jb3VudHJ5Lm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDdkMsT0FBTyxFQUFDLHlCQUF5QixFQUFDLE1BQU0sZ0NBQWdDLENBQUM7QUFDekUsT0FBTyxFQUFDLHFCQUFxQixFQUFFLGVBQWUsRUFBRSxhQUFhLEVBQUUsZUFBZSxFQUFFLGNBQWMsRUFBRSxhQUFhLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUN4SSxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDN0MsT0FBTyxFQUFDLFdBQVcsRUFBRSxtQkFBbUIsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ2hFLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ3RELE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUN2RCxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sTUFBTSxDQUFDOzs7OztBQXVCbEMsTUFBTSxPQUFPLHNCQUFzQjs7Ozs7SUFFakMsWUFBb0IsWUFBNkIsRUFBVSxTQUF1QjtRQUE5RCxpQkFBWSxHQUFaLFlBQVksQ0FBaUI7UUFBVSxjQUFTLEdBQVQsU0FBUyxDQUFjO1FBQ2hGLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzNCLENBQUM7Ozs7SUFFRCxpQkFBaUI7UUFDZixLQUFLLE1BQU0sT0FBTyxJQUFJLFlBQVksRUFBRTs7a0JBQzVCLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFO1lBQzFELElBQUksQ0FBQyxZQUFZO2lCQUNkLFVBQVUsQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsU0FBUztpQkFDMUMsOEJBQThCLENBQUMsZ0NBQWdDLGlCQUFpQixNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQy9GO0lBQ0gsQ0FBQzs7O1lBN0JGLFFBQVEsU0FBQztnQkFDUixZQUFZLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQztnQkFDekMsT0FBTyxFQUFFO29CQUNQLFlBQVk7b0JBQ1osV0FBVztvQkFDWCxtQkFBbUI7b0JBQ25CLGdCQUFnQjtvQkFDaEIsZUFBZTtvQkFDZixhQUFhO29CQUNiLGNBQWM7b0JBQ2QscUJBQXFCO29CQUNyQixhQUFhO29CQUNiLG1CQUFtQjtpQkFDcEI7Z0JBQ0QsT0FBTyxFQUFFLENBQUMseUJBQXlCLENBQUM7YUFDckM7Ozs7WUEzQjhELGVBQWU7WUFJdEUsWUFBWTs7Ozs7OztJQTBCTiw4Q0FBcUM7Ozs7O0lBQUUsMkNBQStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtOZ01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge01hdFNlbGVjdENvdW50cnlDb21wb25lbnR9IGZyb20gJy4vbWF0LXNlbGVjdC1jb3VudHJ5LmNvbXBvbmVudCc7XG5pbXBvcnQge01hdEF1dG9jb21wbGV0ZU1vZHVsZSwgTWF0QnV0dG9uTW9kdWxlLCBNYXRJY29uTW9kdWxlLCBNYXRJY29uUmVnaXN0cnksIE1hdElucHV0TW9kdWxlLCBNYXRNZW51TW9kdWxlfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbCc7XG5pbXBvcnQge0NvbW1vbk1vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7Rm9ybXNNb2R1bGUsIFJlYWN0aXZlRm9ybXNNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7SHR0cENsaWVudE1vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHtEb21TYW5pdGl6ZXJ9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHtDT1VOVFJJRVNfREJ9IGZyb20gJy4vZGInO1xuXG5cbi8qKlxuICogQGF1dGhvciBBbnRob255IE5haGFzXG4gKiBAc2luY2UgMDYuMTEuMTlcbiAqL1xuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbTWF0U2VsZWN0Q291bnRyeUNvbXBvbmVudF0sXG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGUsXG4gICAgRm9ybXNNb2R1bGUsXG4gICAgUmVhY3RpdmVGb3Jtc01vZHVsZSxcbiAgICBIdHRwQ2xpZW50TW9kdWxlLFxuICAgIE1hdEJ1dHRvbk1vZHVsZSxcbiAgICBNYXRNZW51TW9kdWxlLFxuICAgIE1hdElucHV0TW9kdWxlLFxuICAgIE1hdEF1dG9jb21wbGV0ZU1vZHVsZSxcbiAgICBNYXRJY29uTW9kdWxlXG4gICAgLy8gRmxleExheW91dE1vZHVsZVxuICBdLFxuICBleHBvcnRzOiBbTWF0U2VsZWN0Q291bnRyeUNvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgTWF0U2VsZWN0Q291bnRyeU1vZHVsZSB7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpY29uUmVnaXN0cnk6IE1hdEljb25SZWdpc3RyeSwgcHJpdmF0ZSBzYW5pdGl6ZXI6IERvbVNhbml0aXplcikge1xuICAgIHRoaXMucmVnaXN0ZXJDb3VudHJpZXMoKTtcbiAgfVxuXG4gIHJlZ2lzdGVyQ291bnRyaWVzKCkge1xuICAgIGZvciAoY29uc3QgY291bnRyeSBvZiBDT1VOVFJJRVNfREIpIHtcbiAgICAgIGNvbnN0IGNvdW50cnlBbHBoYTJDb2RlID0gY291bnRyeS5hbHBoYTJDb2RlLnRvTG93ZXJDYXNlKCk7XG4gICAgICB0aGlzLmljb25SZWdpc3RyeVxuICAgICAgICAuYWRkU3ZnSWNvbihjb3VudHJ5QWxwaGEyQ29kZSwgdGhpcy5zYW5pdGl6ZXJcbiAgICAgICAgICAuYnlwYXNzU2VjdXJpdHlUcnVzdFJlc291cmNlVXJsKGBhc3NldHMvc3ZnLWNvdW50cnktZmxhZ3Mvc3ZnLyR7Y291bnRyeUFscGhhMkNvZGV9LnN2Z2ApKTtcbiAgICB9XG4gIH1cblxufVxuIl19